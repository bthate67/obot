#!/usr/bin/env python3
# This file is placed in the Public Domain.

__version__ = 101

import atexit
import os
import sys
import termios

sys.path.insert(0, "ob")

from bus import Bus
from clt import Client
from err import Restart
from hdl import Handler
from krn import Kernel, getdir
from obj import cfg
from tbl import Table

name = "obot"
resume = {} 

class CLI(Client):

    def error(self, e):
        print(e.exc)
        raise Restart

    def raw(self, txt):
        print(txt)

class Console(CLI):

    def handle(self, e):
        super().handle(e)
        e.wait()

    def poll(self):
        return input("> ")

def termsetup(fd):
    return termios.tcgetattr(fd)

def termreset():
    if "old" in resume:
        try:
            termios.tcsetattr(resume["fd"], termios.TCSADRAIN, resume["old"])
        except termios.error:
            pass

def termsave():
    try:
        resume["fd"] = sys.stdin.fileno()
        resume["old"] = termsetup(sys.stdin.fileno())
        atexit.register(termreset)
    except termios.error:
        pass

def wrap(func):
    termsave()
    try:
        func()
    except KeyboardInterrupt:
        pass
    finally:
        termreset()

def rse(event):
    raise Restart

def ver(event):
    event.reply("%s %s" % (Kernel.cfg.name.upper(), Kernel.cfg.version))

def main():
    cfg.wd = os.path.expanduser("~/.%s" % name)
    Table.addcmd(rse)
    Table.addcmd(ver)
    k = Kernel()
    k.boot(name, __version__)
    k.start()
    if k.cfg.txt:
        c = CLI()
        return c.cmd(k.cfg.otxt)
    c = Console()
    c.start()
    k.init(k.cfg.mods)
    k.wait()

wrap(main)
