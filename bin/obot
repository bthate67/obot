#!/usr/bin/env python3
# This file is placed in the Public Domain.

__version__ = 101

import os, sys ; sys.path.insert(0, "olib")

from clt import Client
from krn import Kernel, kcmd, root
from obj import cdir, cfg

import all
import atexit
import os
import pwd
import shutil
import sys
import termios

all = "adm,cms,fnd,irc,krn,log,rss,tdo,ver"
name = "obot"
resume = {}

def cprint(txt):
    print(txt)
    sys.stdout.flush()

class CLI(Client):

    def __init__(self):
        super().__init__()
        self.initialize(kcmd)

    def raw(self, txt):
        cprint(txt)

class Console(CLI):

    def handle(self, e):
        super().handle(e)
        e.wait()

    def poll(self):
        return input("> ")

def daemon():
    pid = os.fork()
    if pid != 0:
        termreset()
        os._exit(0)
    os.setsid()
    os.umask(0)
    si = open("/dev/null", 'r')
    so = open("/dev/null", 'a+')
    se = open("/dev/null", 'a+')
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

def privileges(name):
    if os.getuid() != 0:
        return
    try:
        pwn = pwd.getpwnam(name)
    except KeyError:
        return
    os.setgroups([])
    os.setgid(pwn.pw_gid)
    os.setuid(pwn.pw_uid)
    old_umask = os.umask(0o22)
    return True

def scan(path, base=None):
    if not os.path.exists(path):
        return
    if base is None:
        base = os.path.dirname(path).split(os.sep)[-1]
    for p in os.listdir(path):
        mn = p.split(os.sep)[-1][:-3]
        try:
            mod = importlib.import_module(mn, base)
        except ImportError:
            continue
        Kernel.addmod(mod)
        if "register" in dir(mod):
            mod.register(Kernel)

def termsetup(fd):
    return termios.tcgetattr(fd)

def termreset():
    if "old" in resume:
        try:
            termios.tcsetattr(resume["fd"], termios.TCSADRAIN, resume["old"])
        except termios.error:
            pass

def termsave():
    try:
        resume["fd"] = sys.stdin.fileno()
        resume["old"] = termsetup(sys.stdin.fileno())
        atexit.register(termreset)
    except termios.error:
        pass

def main():
    cfg.wd = os.path.expanduser("~/.%s" % name)
    k = Kernel()
    k.parse()
    k.boot(name, __version__)
    k.regs(all)
    if k.opts("d"):
        daemon()
    else:
        c = Console()
        c.start()
    k.init(all)
    k.wait()

def exec(func):
    termsave()
    try:
        func()
    except PermissionError as ex:
        cprint(str(ex))
    except KeyboardInterrupt:
        pass
    finally:
        termreset()

exec(main)
